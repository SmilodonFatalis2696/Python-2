{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "SAMPLES = [ \"A\" ]\n",
    "\n",
    "print ( \"Reading file phase.. #start\" )\n",
    "\n",
    "@workflow.rule(name='all', lineno=5, snakefile='/home/Gulolynx/snakemake_tutorial/Snakefile')\n",
    "\n",
    "@workflow.input(\n",
    "\t\t\t\t\"plot.svg\" ,\n",
    "\t\t\t\texpand ( \"peaks/{sample}.bed\" , sample = SAMPLES )\n",
    ")\n",
    "@workflow.norun()\n",
    "@workflow.run\n",
    "def __rule_all(input, output, params, wildcards, threads, resources, log, version, rule, conda_env, container_img, singularity_args, use_singularity, env_modules, bench_record, jobid, is_shell, bench_iteration, cleanup_scripts, shadow_dir, edit_notebook):\n",
    "\tpass\n",
    "@workflow.rule(name='align', lineno=16, snakefile='/home/Gulolynx/snakemake_tutorial/Snakefile')\n",
    "\n",
    "@workflow.input( \"reads/{sample}.fq.gz\"\n",
    ")\n",
    "\n",
    "@workflow.output( \"bams/{sample}.bam\"\n",
    ")\n",
    "@workflow.run\n",
    "def __rule_align(input, output, params, wildcards, threads, resources, log, version, rule, conda_env, container_img, singularity_args, use_singularity, env_modules, bench_record, jobid, is_shell, bench_iteration, cleanup_scripts, shadow_dir, edit_notebook):\n",
    "\t\t\t\tprint ( \"Executing 'align' rule..\" )\n",
    "\n",
    "\n",
    "\n",
    "@workflow.rule(name='call_peaks', lineno=29, snakefile='/home/Gulolynx/snakemake_tutorial/Snakefile')\n",
    "\n",
    "@workflow.input( \"bams/{sample}.bam\"\n",
    ")\n",
    "\n",
    "@workflow.output( \"peaks/{sample}.bed\"\n",
    ")\n",
    "@workflow.script ( \"scripts/call_peaks.py\"\n",
    ")\n",
    "@workflow.run\n",
    "def __rule_call_peaks(input, output, params, wildcards, threads, resources, log, version, rule, conda_env, container_img, singularity_args, use_singularity, env_modules, bench_record, jobid, is_shell, bench_iteration, cleanup_scripts, shadow_dir, edit_notebook):\n",
    "\tscript ( \"scripts/call_peaks.py\" , '/home/Gulolynx/snakemake_tutorial/Snakefile' , input, output, params, wildcards, threads, resources, log, config, rule, conda_env, container_img, singularity_args, env_modules, bench_record, jobid, bench_iteration, cleanup_scripts, shadow_dir\n",
    ") \n",
    "\n",
    "\n",
    "@workflow.rule(name='plot', lineno=45, snakefile='/home/Gulolynx/snakemake_tutorial/Snakefile')\n",
    "\n",
    "@workflow.input(\n",
    "\t\t\t\texpand ( \"peaks/{sample}.bed\" , sample = SAMPLES )\n",
    ")\n",
    "\n",
    "@workflow.output( \"plot.svg\"\n",
    ")\n",
    "@workflow.shellcmd ( \"echo TODO\"\n",
    ")\n",
    "@workflow.run\n",
    "def __rule_plot(input, output, params, wildcards, threads, resources, log, version, rule, conda_env, container_img, singularity_args, use_singularity, env_modules, bench_record, jobid, is_shell, bench_iteration, cleanup_scripts, shadow_dir, edit_notebook):\n",
    "\tshell ( \"echo TODO\" , bench_record=bench_record, bench_iteration=bench_iteration\n",
    ") \n",
    "\n",
    "\n",
    "print ( \"Reading file phase.. #end\" ) \n",
    "Reading file phase.. #start\n",
    "Reading file phase.. #end"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
